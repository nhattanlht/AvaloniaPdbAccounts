-- K·∫øt n·ªëi:
conn AdminPdb/123@localhost:1521/PDB


CREATE OR REPLACE FUNCTION fn_vpd_dangky (
  schema_name IN VARCHAR2,
  table_name IN VARCHAR2
) RETURN VARCHAR2 AS
  v_role VARCHAR2(50);
BEGIN
  -- L·∫•y vai tr√≤ ng∆∞·ªùi d√πng hi·ªán t·∫°i
  SELECT MAX(VAITRO) INTO v_role 
  FROM NHANVIEN
  WHERE MANV = SYS_CONTEXT('USERENV','SESSION_USER'); -- gi·∫£ s·ª≠ MANV tr√πng v·ªõi USER Oracle
  
  -- Ki·ªÉm tra n·∫øu vai tr√≤ l√† NVPKT (ƒë·ªÉ ƒë∆°n gi·∫£n, kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)
  IF UPPER(v_role) = 'NVPKT' THEN
    RETURN '1=1'; -- Cho ph√©p xem h·∫øt d·ªØ li·ªáu
  ELSE
    RETURN '1=0'; -- Kh√¥ng cho ph√©p xem d·ªØ li·ªáu
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN '1=0'; -- Kh√¥ng cho ph√©p n·∫øu kh√¥ng t√¨m th·∫•y user
END;
/
BEGIN
  DBMS_RLS.ADD_POLICY(
    object_schema => 'ADMINPDB', -- thay b·∫±ng schema ch·ª©a b·∫£ng DANGKY
    object_name   => 'DANGKY',
    policy_name   => 'POLICY_DANGKY_VPD',
    function_schema => 'ADMINPDB',
    policy_function => 'fn_vpd_dangky',
    statement_types => 'SELECT,UPDATE',
    update_check => TRUE
  );
END;
/
CREATE OR REPLACE TRIGGER trg_check_update_dangky
BEFORE UPDATE ON DANGKY
FOR EACH ROW
DECLARE
  v_role VARCHAR2(50);
BEGIN
  SELECT MAX(VAITRO) INTO v_role FROM NHANVIEN
  WHERE MANV = SYS_CONTEXT('USERENV','SESSION_USER');

  IF UPPER(v_role) != 'NVPKT' THEN
    RAISE_APPLICATION_ERROR(-20001, 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b·∫£ng DANGKY');
  END IF;

  -- Ki·ªÉm tra ch·ªâ cho ph√©p c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒëi·ªÉm
  IF UPDATING THEN
    IF
      ( :OLD.DIEMTH <> :NEW.DIEMTH OR
        :OLD.DIEMQT <> :NEW.DIEMQT OR
        :OLD.DIEMCK <> :NEW.DIEMCK OR
        :OLD.DIEMTK <> :NEW.DIEMTK ) THEN
        NULL; -- cho ph√©p thay ƒë·ªïi ƒëi·ªÉm
    ELSE
      -- Ki·ªÉm tra c√≥ c·∫≠p nh·∫≠t c·ªôt kh√°c kh√¥ng
      IF (:OLD.MASV <> :NEW.MASV OR :OLD.MAMM <> :NEW.MAMM) THEN
        RAISE_APPLICATION_ERROR(-20002, 'Kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t tr∆∞·ªùng ngo√†i ƒëi·ªÉm s·ªë');
      END IF;
    END IF;
  END IF;
END;
/

-- 7. Grant quy·ªÅn SELECT cho user c√≥ role NVPKT
DECLARE
    v_count NUMBER;
BEGIN
    FOR usr IN (
        SELECT grantee 
        FROM dba_role_privs 
        WHERE granted_role = 'NVPKT'
          AND grantee IN (SELECT username FROM all_users)
    ) LOOP
        SELECT COUNT(*) INTO v_count FROM all_users WHERE username = usr.grantee;
        IF v_count > 0 THEN
            BEGIN
                EXECUTE IMMEDIATE 'GRANT SELECT ON MOMON TO "' || usr.grantee || '"';

                EXECUTE IMMEDIATE 'GRANT SELECT ON HOCPHAN TO "' || usr.grantee || '"';
                EXECUTE IMMEDIATE 'GRANT SELECT ON SINHVIEN TO "' || usr.grantee || '"';
                EXECUTE IMMEDIATE 'GRANT SELECT, UPDATE ON DANGKY TO "' || usr.grantee || '"';

                DBMS_OUTPUT.PUT_LINE('‚úÖ Grant SELECT to user: ' || usr.grantee);
            EXCEPTION WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('‚ùå Error granting SELECT to user ' || usr.grantee || ': ' || SQLERRM);
            END;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('üéØ Finished granting SELECT to NVPKT users.');
END;
/

-- K·∫øt th√∫c session
QUIT;
